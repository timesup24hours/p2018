{"version":3,"sources":["components/AGGrid/index.tsx"],"names":["suppressEnter","params","event","which","AGGrid","props","_this","Object","_Users_kk_Desktop_p2018_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_Users_kk_Desktop_p2018_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_kk_Desktop_p2018_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","gridApi","gridColumnApi","onGridReady","api","columnApi","httpRequest","XMLHttpRequest","open","send","onreadystatechange","data","readyState","status","JSON","parse","responseText","setState","rowData","onCellKeyDown","e","console","log","onCellKeyPress","keyPressed","key","rowNode","node","newSelection","selected","athlete","setSelected","state","columnDefinition","field","filter","filterParams","clearButton","applyButton","debounceMs","columnDefs","width","suppressKeyboardEvent","defaultColDef","editable","sortable","rowSelection","keysToSuppress","editingKeys","ctrlKey","metaKey","push","editing","concat","indexOf","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","style","height","position","backgroundColor","color","top","left","className","transform","ag_grid_react__WEBPACK_IMPORTED_MODULE_6__","suppressRowClickSelection","enableRangeSelection","Component"],"mappings":"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","file":"static/js/170.d042d6df.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-enterprise';\n\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-balham-dark.css';\n// import 'ag-grid-community/dist/styles/ag-theme-dark.css';\n// import 'ag-grid-community/dist/styles/ag-theme-material.css';\nimport './index.scss';\n\nfunction suppressEnter(params: any): boolean {\n  let KEY_ENTER = 13;\n  var event = params.event;\n  var key = event.which;\n  var suppress = key === KEY_ENTER;\n  return suppress;\n}\n\nclass AGGrid extends Component<any, any> {\n  private constructor(props: any) {\n    super(props);\n    this.state = {\n      columnDefinition: {\n        field: 'athlete',\n        // set the column to use text filter\n        filter: 'agTextColumnFilter',\n        // pass in additional parameters to the text filter\n        filterParams: {\n          clearButton: true,\n          applyButton: true,\n          debounceMs: 200\n        }\n      },\n      columnDefs: [\n        // {\n        //   headerName: 'Make',\n        //   field: 'make',\n        //   sortable: true,\n        //   filter: true,\n        //   checkboxSelection: true,\n        //   sort: 'desc',\n        //   suppressKeyboardEvent: suppressEnter\n        // },\n        // {\n        //   headerName: 'Model',\n        //   field: 'model',\n        //   sortable: true,\n        //   filter: true,\n        //   checkboxSelection: true\n        // },\n        // {\n        //   headerName: 'Price',\n        //   field: 'price',\n        //   sortable: true,\n        //   filter: true,\n        //   checkboxSelection: true\n        // },\n        {\n          field: 'athlete',\n          width: 200,\n          suppressKeyboardEvent: suppressEnter,\n          filter: 'agTextColumnFilter'\n        },\n        { field: 'age', filter: 'agNumberColumnFilter' },\n        { field: 'country' },\n        { field: 'year' },\n        { field: 'date' },\n        { field: 'sport', filter: false },\n        { field: 'gold', filter: true },\n        { field: 'silver' },\n        { field: 'bronze' },\n        { field: 'total' }\n      ],\n      rowData: [],\n      defaultColDef: {\n        width: 100,\n        editable: true,\n        sortable: true,\n        filter: true\n      },\n      rowSelection: 'multiple',\n      suppressKeyboardEvent: function(params: any) {\n        let KEY_A = 65;\n        let KEY_C = 67;\n        let KEY_V = 86;\n        let KEY_D = 68;\n        let KEY_PAGE_UP = 33;\n        let KEY_PAGE_DOWN = 34;\n        let KEY_TAB = 9;\n        let KEY_LEFT = 37;\n        let KEY_UP = 38;\n        let KEY_RIGHT = 39;\n        let KEY_DOWN = 40;\n        let KEY_F2 = 113;\n        let KEY_BACKSPACE = 8;\n        let KEY_ESCAPE = 27;\n        let KEY_SPACE = 32;\n        let KEY_DELETE = 46;\n        let KEY_PAGE_HOME = 36;\n        let KEY_PAGE_END = 35;\n        var event = params.event;\n        var key = event.which;\n        var keysToSuppress = [\n          KEY_PAGE_UP,\n          KEY_PAGE_DOWN,\n          KEY_TAB,\n          KEY_F2,\n          KEY_ESCAPE\n        ];\n        var editingKeys = [\n          KEY_LEFT,\n          KEY_RIGHT,\n          KEY_UP,\n          KEY_DOWN,\n          KEY_BACKSPACE,\n          KEY_DELETE,\n          KEY_SPACE,\n          KEY_PAGE_HOME,\n          KEY_PAGE_END\n        ];\n        if (event.ctrlKey || event.metaKey) {\n          keysToSuppress.push(KEY_A);\n          keysToSuppress.push(KEY_V);\n          keysToSuppress.push(KEY_C);\n          keysToSuppress.push(KEY_D);\n        }\n        if (!params.editing) {\n          keysToSuppress = keysToSuppress.concat(editingKeys);\n        }\n        var suppress = keysToSuppress.indexOf(key) >= 0;\n        return suppress;\n      }\n      // rowData: [\n      //   {\n      //     make: 'Toyota',\n      //     model: 'Celica',\n      //     price: 35000\n      //   },\n      // ]\n    };\n  }\n  private gridApi: any;\n  private gridColumnApi: any;\n\n  public componentDidMount(): void {\n    // fetch('https://api.myjson.com/bins/ly7d1')\n    //   .then(result => result.json())\n    //   .then(rowData => this.setState({ rowData }));\n  }\n\n  // private onButtonClick = (e: any): void => {\n  //   const selectedNodes = this.gridApi.getSelectedNodes();\n  //   const selectedData = selectedNodes.map((node: any) => node.data);\n  //   const selectedDataStringPresentation = selectedData\n  //     .map((node: any) => node.make + ' ' + node.model)\n  //     .join(', ');\n  // };\n\n  private onGridReady = (params: any): void => {\n    this.gridApi = params.api;\n    this.gridColumnApi = params.columnApi;\n\n    const httpRequest = new XMLHttpRequest();\n    const updateData = (data: any) => {\n      this.setState({ rowData: data });\n    };\n\n    httpRequest.open(\n      'GET',\n      'https://raw.githubusercontent.com/ag-grid/ag-grid/master/packages/ag-grid-docs/src/olympicWinnersSmall.json'\n    );\n    httpRequest.send();\n    httpRequest.onreadystatechange = () => {\n      if (httpRequest.readyState === 4 && httpRequest.status === 200) {\n        updateData(JSON.parse(httpRequest.responseText));\n      }\n    };\n  };\n\n  private onCellKeyDown = (e: any): void => {\n    console.log('onCellKeyDown', e);\n  };\n\n  private onCellKeyPress = (e: any): void => {\n    console.log('onCellKeyPress', e);\n    let keyPressed = e.event.key;\n    console.log('Key Pressed = ' + keyPressed);\n    if (keyPressed === 's') {\n      var rowNode = e.node;\n      var newSelection = !rowNode.selected;\n      console.log(\n        'setting selection on node ' +\n          rowNode.data.athlete +\n          ' to ' +\n          newSelection\n      );\n      rowNode.setSelected(newSelection);\n    }\n  };\n\n  public render(): JSX.Element {\n    return (\n      <div\n        style={{\n          height: '100vh',\n          width: '100vw',\n          position: 'relative',\n          backgroundColor: 'rgba(128, 0, 128, 0.5)'\n        }}\n      >\n        <div\n          style={{\n            color: 'white',\n            position: 'absolute',\n            top: '70px',\n            left: '20px'\n          }}\n        >\n          Hover Header -> Sort, Filter\n        </div>\n        <div\n          style={{\n            color: 'white',\n            position: 'absolute',\n            top: '100px',\n            left: '20px'\n          }}\n        >\n          Right Click -> Export, Copy\n        </div>\n        <div\n          style={{\n            color: 'white',\n            position: 'absolute',\n            top: '130px',\n            left: '20px'\n          }}\n        >\n          Double Click Field -> Edit\n        </div>\n        <div\n          // className=\"ag-theme-material\"\n          className=\"ag-theme-balham-dark\"\n          style={{\n            height: 'calc(50vh - 50px)',\n            width: '60vw',\n            position: 'absolute',\n            top: 'calc(50% - 50px)',\n            left: '50%',\n            transform: 'translate(-50%, -50%)'\n            // border: '1px solid lightgrey'\n          }}\n        >\n          {/* <button onClick={this.onButtonClick}>Get selected rows</button> */}\n\n          <AgGridReact\n            // onGridReady={params => (this.gridApi = params.api)}\n            onGridReady={this.onGridReady}\n            // rowSelection=\"multiple\"\n            columnDefs={this.state.columnDefs}\n            rowData={this.state.rowData}\n            defaultColDef={this.state.defaultColDef}\n            onCellKeyDown={this.onCellKeyDown}\n            onCellKeyPress={this.onCellKeyPress}\n            suppressKeyboardEvent={this.state.suppressKeyboardEvent}\n            suppressRowClickSelection={true}\n            rowSelection={this.state.rowSelection}\n            enableRangeSelection={true}\n            // columnDefinition={this.state.columnDefinition}\n          ></AgGridReact>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default AGGrid;\n"],"sourceRoot":""}