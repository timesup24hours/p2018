{"version":3,"sources":["../node_modules/refractor/lang/php.js","../node_modules/refractor/lang/php-extras.js","../node_modules/refractor/lang/markup-templating.js"],"names":["refractorMarkupTemplating","__webpack_require__","php","Prism","register","languages","extend","keyword","boolean","pattern","alias","constant","comment","lookbehind","insertBefore","shell-comment","delimiter","variable","package","inside","punctuation","property","string_interpolation","rest","nowdoc-string","greedy","heredoc-string","interpolation","single-quoted-string","double-quoted-string","hooks","add","env","test","code","buildPlaceholders","tokenizePlaceholders","module","exports","displayName","aliases","refractorPhp","phpExtras","this","global","scope","markupTemplating","getPlaceholder","language","index","toUpperCase","Object","defineProperties","value","placeholderPattern","replaceFilter","tokenStack","replace","match","placeholder","i","length","indexOf","grammar","markup","j","keys","walkTokens","tokens","token","content","k","t","s","before","substring","middle","Token","tokenize","after","replacement","push","apply","splice","concat"],"mappings":"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","file":"static/js/react-syntax-highlighter_languages_refractor_phpExtras.2b2fb997.chunk.js","sourcesContent":["'use strict';\n\nvar refractorMarkupTemplating = require('./markup-templating.js');\n\nmodule.exports = php;\nphp.displayName = 'php';\nphp.aliases = [];\n\nfunction php(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  /**\n   * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/\n   * Modified by Miles Johnson: http://milesj.me\n   *\n   * Supports the following:\n   *      - Extends clike syntax\n   *      - Support for PHP 5.3+ (namespaces, traits, generators, etc)\n   *      - Smarter constant and function matching\n   *\n   * Adds the following new token classes:\n   *      constant, delimiter, variable, function, package\n   */\n  ;\n\n  (function (Prism) {\n    Prism.languages.php = Prism.languages.extend('clike', {\n      keyword: /\\b(?:__halt_compiler|abstract|and|array|as|break|callable|case|catch|class|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|eval|exit|extends|final|finally|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|namespace|new|or|parent|print|private|protected|public|require|require_once|return|static|switch|throw|trait|try|unset|use|var|while|xor|yield)\\b/i,\n      boolean: {\n        pattern: /\\b(?:false|true)\\b/i,\n        alias: 'constant'\n      },\n      constant: [/\\b[A-Z_][A-Z0-9_]*\\b/, /\\b(?:null)\\b/i],\n      comment: {\n        pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n        lookbehind: true\n      }\n    });\n    Prism.languages.insertBefore('php', 'string', {\n      'shell-comment': {\n        pattern: /(^|[^\\\\])#.*/,\n        lookbehind: true,\n        alias: 'comment'\n      }\n    });\n    Prism.languages.insertBefore('php', 'comment', {\n      delimiter: {\n        pattern: /\\?>$|^<\\?(?:php(?=\\s)|=)?/i,\n        alias: 'important'\n      }\n    });\n    Prism.languages.insertBefore('php', 'keyword', {\n      variable: /\\$+(?:\\w+\\b|(?={))/i,\n      package: {\n        pattern: /(\\\\|namespace\\s+|use\\s+)[\\w\\\\]+/,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      }\n    }); // Must be defined after the function pattern\n\n    Prism.languages.insertBefore('php', 'operator', {\n      property: {\n        pattern: /(->)[\\w]+/,\n        lookbehind: true\n      }\n    });\n    var string_interpolation = {\n      pattern: /{\\$(?:{(?:{[^{}]+}|[^{}]+)}|[^{}])+}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[.+?]|->\\w+)*)/,\n      lookbehind: true,\n      inside: {\n        rest: Prism.languages.php\n      }\n    };\n    Prism.languages.insertBefore('php', 'string', {\n      'nowdoc-string': {\n        pattern: /<<<'([^']+)'(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;/,\n        greedy: true,\n        alias: 'string',\n        inside: {\n          delimiter: {\n            pattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\n            alias: 'symbol',\n            inside: {\n              punctuation: /^<<<'?|[';]$/\n            }\n          }\n        }\n      },\n      'heredoc-string': {\n        pattern: /<<<(?:\"([^\"]+)\"(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;|([a-z_]\\w*)(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\2;)/i,\n        greedy: true,\n        alias: 'string',\n        inside: {\n          delimiter: {\n            pattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\n            alias: 'symbol',\n            inside: {\n              punctuation: /^<<<\"?|[\";]$/\n            }\n          },\n          interpolation: string_interpolation // See below\n\n        }\n      },\n      'single-quoted-string': {\n        pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n        greedy: true,\n        alias: 'string'\n      },\n      'double-quoted-string': {\n        pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n        greedy: true,\n        alias: 'string',\n        inside: {\n          interpolation: string_interpolation // See below\n\n        }\n      }\n    }); // The different types of PHP strings \"replace\" the C-like standard string\n\n    delete Prism.languages.php['string'];\n    Prism.hooks.add('before-tokenize', function (env) {\n      if (!/<\\?/.test(env.code)) {\n        return;\n      }\n\n      var phpPattern = /<\\?(?:[^\"'/#]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|(?:\\/\\/|#)(?:[^?\\n\\r]|\\?(?!>))*|\\/\\*[\\s\\S]*?(?:\\*\\/|$))*?(?:\\?>|$)/gi;\n      Prism.languages['markup-templating'].buildPlaceholders(env, 'php', phpPattern);\n    });\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'php');\n    });\n  })(Prism);\n}","'use strict';\n\nvar refractorPhp = require('./php.js');\n\nmodule.exports = phpExtras;\nphpExtras.displayName = 'phpExtras';\nphpExtras.aliases = [];\n\nfunction phpExtras(Prism) {\n  Prism.register(refractorPhp);\n  Prism.languages.insertBefore('php', 'variable', {\n    this: /\\$this\\b/,\n    global: /\\$(?:_(?:SERVER|GET|POST|FILES|REQUEST|SESSION|ENV|COOKIE)|GLOBALS|HTTP_RAW_POST_DATA|argc|argv|php_errormsg|http_response_header)\\b/,\n    scope: {\n      pattern: /\\b[\\w\\\\]+::/,\n      inside: {\n        keyword: /static|self|parent/,\n        punctuation: /::|\\\\/\n      }\n    }\n  });\n}","'use strict';\n\nmodule.exports = markupTemplating;\nmarkupTemplating.displayName = 'markupTemplating';\nmarkupTemplating.aliases = [];\n\nfunction markupTemplating(Prism) {\n  ;\n\n  (function (Prism) {\n    /**\n     * Returns the placeholder for the given language id and index.\n     *\n     * @param {string} language\n     * @param {string|number} index\n     * @returns {string}\n     */\n    function getPlaceholder(language, index) {\n      return '___' + language.toUpperCase() + index + '___';\n    }\n\n    Object.defineProperties(Prism.languages['markup-templating'] = {}, {\n      buildPlaceholders: {\n        /**\n         * Tokenize all inline templating expressions matching `placeholderPattern`.\n         *\n         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n         * `true` will be replaced.\n         *\n         * @param {object} env The environment of the `before-tokenize` hook.\n         * @param {string} language The language id.\n         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n         * @param {(match: string) => boolean} [replaceFilter]\n         */\n        value: function value(env, language, placeholderPattern, replaceFilter) {\n          if (env.language !== language) {\n            return;\n          }\n\n          var tokenStack = env.tokenStack = [];\n          env.code = env.code.replace(placeholderPattern, function (match) {\n            if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n              return match;\n            }\n\n            var i = tokenStack.length;\n            var placeholder; // Check for existing strings\n\n            while (env.code.indexOf(placeholder = getPlaceholder(language, i)) !== -1) {\n              ++i;\n            } // Create a sparse array\n\n\n            tokenStack[i] = match;\n            return placeholder;\n          }); // Switch the grammar to markup\n\n          env.grammar = Prism.languages.markup;\n        }\n      },\n      tokenizePlaceholders: {\n        /**\n         * Replace placeholders with proper tokens after tokenizing.\n         *\n         * @param {object} env The environment of the `after-tokenize` hook.\n         * @param {string} language The language id.\n         */\n        value: function value(env, language) {\n          if (env.language !== language || !env.tokenStack) {\n            return;\n          } // Switch the grammar back\n\n\n          env.grammar = Prism.languages[language];\n          var j = 0;\n          var keys = Object.keys(env.tokenStack);\n\n          function walkTokens(tokens) {\n            for (var i = 0; i < tokens.length; i++) {\n              // all placeholders are replaced already\n              if (j >= keys.length) {\n                break;\n              }\n\n              var token = tokens[i];\n\n              if (typeof token === 'string' || token.content && typeof token.content === 'string') {\n                var k = keys[j];\n                var t = env.tokenStack[k];\n                var s = typeof token === 'string' ? token : token.content;\n                var placeholder = getPlaceholder(language, k);\n                var index = s.indexOf(placeholder);\n\n                if (index > -1) {\n                  ++j;\n                  var before = s.substring(0, index);\n                  var middle = new Prism.Token(language, Prism.tokenize(t, env.grammar), 'language-' + language, t);\n                  var after = s.substring(index + placeholder.length);\n                  var replacement = [];\n\n                  if (before) {\n                    replacement.push.apply(replacement, walkTokens([before]));\n                  }\n\n                  replacement.push(middle);\n\n                  if (after) {\n                    replacement.push.apply(replacement, walkTokens([after]));\n                  }\n\n                  if (typeof token === 'string') {\n                    tokens.splice.apply(tokens, [i, 1].concat(replacement));\n                  } else {\n                    token.content = replacement;\n                  }\n                }\n              } else if (token.content\n              /* && typeof token.content !== 'string' */\n              ) {\n                  walkTokens(token.content);\n                }\n            }\n\n            return tokens;\n          }\n\n          walkTokens(env.tokens);\n        }\n      }\n    });\n  })(Prism);\n}"],"sourceRoot":""}