{"version":3,"sources":["components/SelfMakeChart/index.js"],"names":["SelfMakeChart","_ref","columns","_ref$rows","rows","defaultData","Array","from","length","Math","ceil","random","_useState","useState","_useState2","Object","_Users_kk_Desktop_p2018_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","data","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","className","map","d","i","key","style","height","concat","width","marginLeft","backgroundColor"],"mappings":"4JAsFeA,UAvDO,SAAAC,GAAgCA,EAA7BC,QAA6B,IAAAC,EAAAF,EAAfG,YAAe,IAAAD,EAAR,EAAQA,EAChDE,EAAcC,MAAMC,KAAK,CAAEC,OAAQJ,GAAQ,kBAC7CK,KAAKC,KAAqB,GAAhBD,KAAKE,YAFmCC,EAI5BC,mBAASR,GAJmBS,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAI7CK,EAJ6CH,EAAA,GAAAA,EAAA,GAgCpD,OACEI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACZJ,EAAKK,IAAI,SAACC,EAAGC,GACZ,OACEN,EAAAC,EAAAC,cAAA,OACEK,IAAKD,EACLE,MAAO,CACLC,OAAM,GAAAC,OAAKL,EAAL,MACNM,MAAO,OAGPC,WAAY,MAEZC,gBAAiB","file":"static/js/184.528ee2ac.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nimport './index.scss';\n\n// data = [random.randint(0, 99) for i in range(COLUMNS)]\n// minimum = min(data)\n// maximum = max(data)\n\n// for row in range(ROWS):\n//     chart.append([])\n//     chart[row].append(math.ceil((maximum / ROWS) * row))\n//     for d in data:\n//         chart[row].append('   ')\n\n// for r_idx, row in enumerate(chart):\n//     for c_idx, col in enumerate(data, start=1):\n//         if col >= row[0]:\n//             chart[r_idx][c_idx] = ' _ '\n\n// chart.reverse()\n\n// for row in chart:\n//     for col in row:\n//         sys.stdout.write(f'{str(col).rjust(3)} ')\n//     sys.stdout.write('\\n')\n\n// sys.stdout.write('     ')\n// for d in data:\n//     sys.stdout.write(f'{str(d).ljust(4)}')\n// print()\n\nconst SelfMakeChart = ({ columns = 10, rows = 5 }) => {\n  let defaultData = Array.from({ length: rows }, () =>\n    Math.ceil(Math.random() * 99)\n  );\n  const [data, setData] = useState(defaultData);\n  // setInterval(() => {\n  // setData(Array.from({ length: rows }, () => Math.ceil(Math.random() * 99)));\n  // }, 100);\n  // const maximum = Math.max(...data);\n  // const minimum = Math.min(...data);\n  // const chart = [];\n\n  // for (let i = 0; i < rows; i++) {\n  //   if (!chart[i]) chart[i] = [];\n  //   // console.log(\n  //   //   'Math.ceil((maximum / rows) * i): ',\n  //   //   Math.ceil((maximum / rows) * i)\n  //   // );\n  //   chart[i].push(Math.ceil((maximum / rows) * i));\n  //   data.forEach((d, index) => {\n  //     chart[i].push(' ');\n  //   });\n  // }\n\n  // chart.forEach((row, rIndex) => {\n  //   data.forEach((col, cIndex) => {\n  //     if (col >= row[0]) chart[rIndex][cIndex] = ' _ ';\n  //   });\n  // });\n\n  // chart.reverse();\n\n  return (\n    <div className=\"SelfMakeChart\">\n      <div className=\"chart\">\n        {data.map((d, i) => {\n          return (\n            <div\n              key={i}\n              style={{\n                height: `${d}px`,\n                width: '10px',\n                // position: 'absolute',\n                // left: `${i * 14}px`,\n                marginLeft: '4px',\n                // bottom: '0px',\n                backgroundColor: 'white'\n              }}\n            ></div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\nexport default SelfMakeChart;\n"],"sourceRoot":""}