{"version":3,"sources":["components/TodoListDnD/util.js","components/TodoListDnD/Completed.js","components/TodoListDnD/Todos.js","components/TodoListDnD/index.js"],"names":["getItems","count","offset","arguments","length","undefined","Array","from","v","k","map","id","concat","content","reorder","list","startIndex","endIndex","result","_result$splice","splice","removed","Object","slicedToArray","move","source","destination","droppableSource","droppableDestination","sourceClone","destClone","_sourceClone$splice","index","droppableId","getItemStyle","isDragging","draggableStyle","objectSpread","userSelect","padding","grid","margin","background","getListStyle","isDraggingOver","backgroundColor","width","Completed","_ref","completed","react_default","a","createElement","react_beautiful_dnd_esm","provided","snapshot","ref","innerRef","style","className","item","key","draggableId","assign","draggableProps","dragHandleProps","placeholder","Todos","todos","TodoList","state","id2List","getList","_this","onDragEnd","items","setState","this","TodoListDnD_Todos","TodoListDnD_Completed","React","Component"],"mappings":"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","file":"static/js/169.37152515.chunk.js","sourcesContent":["// fake data generator\nexport const getItems = (count, offset = 0) =>\n  Array.from({ length: count }, (v, k) => k).map(k => ({\n    id: `item-${k + offset}`,\n    content: `item ${k + offset}`\n  }));\n\n// a little function to help us with reordering the result\nexport const reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\n/**\n * Moves an item from one list to another list.\n */\nexport const move = (\n  source,\n  destination,\n  droppableSource,\n  droppableDestination\n) => {\n  const sourceClone = Array.from(source);\n  const destClone = Array.from(destination);\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\n\n  destClone.splice(droppableDestination.index, 0, removed);\n\n  const result = {};\n  result[droppableSource.droppableId] = sourceClone;\n  result[droppableDestination.droppableId] = destClone;\n\n  return result;\n};\n\nconst grid = 8;\n\nexport const getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: 'none',\n  padding: grid * 2,\n  margin: `0 0 ${grid}px 0`,\n\n  // change background colour if dragging\n  background: isDragging ? 'lightgreen' : 'grey',\n\n  // styles we need to apply on draggables\n  ...draggableStyle\n});\n\nexport const getListStyle = isDraggingOver => ({\n  backgroundColor: isDraggingOver ? 'lightblue' : 'lightgrey',\n  padding: grid,\n  width: 250\n});\n","import React from 'react';\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\n\nimport { getListStyle, getItemStyle } from './util';\n\nconst Completed = ({ completed }) => {\n  return (\n    <Droppable droppableId=\"completed\">\n      {(provided, snapshot) => (\n        <div\n          ref={provided.innerRef}\n          style={getListStyle(snapshot.isDraggingOver)}\n          className=\"TodoListDnD-Container\"\n        >\n          <h3 className=\"TodoListDnD-Title\">Completed:</h3>\n          {completed.map((item, index) => (\n            <Draggable key={item.id} draggableId={item.id} index={index}>\n              {(provided, snapshot) => (\n                <div\n                  ref={provided.innerRef}\n                  {...provided.draggableProps}\n                  {...provided.dragHandleProps}\n                  className=\"TodoListDnD-List TodoListDnD-Complete\"\n                  style={getItemStyle(\n                    snapshot.isDragging,\n                    provided.draggableProps.style\n                  )}\n                >\n                  âœ… <div className=\"text\">{item.content}</div>\n                </div>\n              )}\n            </Draggable>\n          ))}\n          {provided.placeholder}\n        </div>\n      )}\n    </Droppable>\n  );\n};\nexport default Completed;\n","import React from 'react';\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\n\nimport { getListStyle, getItemStyle } from './util';\n\nconst Todos = ({ todos }) => {\n  return (\n    <Droppable droppableId=\"todos\">\n      {(provided, snapshot) => (\n        <div\n          ref={provided.innerRef}\n          style={getListStyle(snapshot.isDraggingOver)}\n          className=\"TodoListDnD-Container\"\n        >\n          <h3 className=\"TodoListDnD-Title\">Todo(s):</h3>\n          {todos.map((item, index) => (\n            <Draggable key={item.id} draggableId={item.id} index={index}>\n              {(provided, snapshot) => (\n                <div\n                  ref={provided.innerRef}\n                  {...provided.draggableProps}\n                  {...provided.dragHandleProps}\n                  className=\"TodoListDnD-List\"\n                  style={getItemStyle(\n                    snapshot.isDragging,\n                    provided.draggableProps.style\n                  )}\n                >\n                  {item.content}\n                </div>\n              )}\n            </Draggable>\n          ))}\n          {provided.placeholder}\n        </div>\n      )}\n    </Droppable>\n  );\n};\nexport default Todos;\n","import React, { useState } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { getItems, reorder, move, getItemStyle, getListStyle } from './util';\nimport './index.scss';\n\nimport Completed from './Completed';\nimport Todos from './Todos';\n\nclass TodoList extends React.Component {\n  state = {\n    todos: getItems(10),\n    completed: getItems(5, 10)\n  };\n\n  /**\n   * A semi-generic way to handle multiple lists. Matches\n   * the IDs of the droppable container to the names of the\n   * source arrays stored in the state.\n   */\n  id2List = {\n    todos: 'todos',\n    completed: 'completed'\n  };\n\n  getList = id => this.state[this.id2List[id]];\n\n  onDragEnd = result => {\n    const { source, destination } = result;\n\n    // dropped outside the list\n    if (!destination) {\n      return;\n    }\n\n    if (source.droppableId === destination.droppableId) {\n      const items = reorder(\n        this.getList(source.droppableId),\n        source.index,\n        destination.index\n      );\n\n      let state = { items };\n\n      if (source.droppableId === 'completed') {\n        state = { completed: items };\n      }\n\n      this.setState(state);\n    } else {\n      const result = move(\n        this.getList(source.droppableId),\n        this.getList(destination.droppableId),\n        source,\n        destination\n      );\n\n      this.setState({\n        todos: result.todos,\n        completed: result.completed\n      });\n    }\n  };\n\n  // Normally you would want to split things out into separate components.\n  // But in this example everything is just done in one place for simplicity\n  render() {\n    return (\n      <div className=\"TodoListDnD\">\n        <div className=\"desc\">Drag from ðŸ’ªTodo to âœ…Completed</div>\n        <DragDropContext onDragEnd={this.onDragEnd}>\n          <div>\n            <Todos todos={this.state.todos} />\n          </div>\n          <div>\n            <Completed completed={this.state.completed} />\n          </div>\n        </DragDropContext>\n      </div>\n    );\n  }\n}\nexport default TodoList;\n"],"sourceRoot":""}