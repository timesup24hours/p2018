{"version":3,"sources":["components/TodoListDnD/util.js","components/TodoListDnD/Completed.js","components/TodoListDnD/Todos.js","components/TodoListDnD/index_hv.js"],"names":["getItems","count","offset","arguments","length","undefined","Array","from","v","k","map","id","concat","content","reorder","list","startIndex","endIndex","result","_result$splice","splice","removed","Object","slicedToArray","move","source","destination","droppableSource","droppableDestination","sourceClone","destClone","_sourceClone$splice","index","droppableId","getItemStyle","isDragging","draggableStyle","objectSpread","userSelect","padding","grid","margin","background","getListStyle","isDraggingOver","backgroundColor","width","Completed","_ref","completed","react_default","a","createElement","react_beautiful_dnd_esm","type","provided","snapshot","ref","innerRef","style","className","item","key","draggableId","assign","draggableProps","dragHandleProps","placeholder","Todos","todos","TodoList","state","uuid","isDraggingContainer","id2List","getList","_this","onDragEnd","console","log","setState","items","onDragStart","onDragUpdate","_ref2","_this2","this","direction","droppableProps","container","TodoListDnD_Todos","isDropDisabled","TodoListDnD_Completed","React","Component"],"mappings":"yLACaA,EAAW,SAACC,GAAD,IAAQC,EAARC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAiB,EAAjB,OACtBG,MAAMC,KAAK,CAAEH,OAAQH,GAAS,SAACO,EAAGC,GAAJ,OAAUA,IAAGC,IAAI,SAAAD,GAAC,MAAK,CACnDE,GAAE,QAAAC,OAAUH,EAAIP,GAChBW,QAAO,QAAAD,OAAUH,EAAIP,OAIZY,EAAU,SAACC,EAAMC,EAAYC,GACxC,IAAMC,EAASZ,MAAMC,KAAKQ,GAD2BI,EAEnCD,EAAOE,OAAOJ,EAAY,GAArCK,EAF8CC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,MAKrD,OAFAD,EAAOE,OAAOH,EAAU,EAAGI,GAEpBH,GAMIM,EAAO,SAClBC,EACAC,EACAC,EACAC,GAEA,IAAMC,EAAcvB,MAAMC,KAAKkB,GACzBK,EAAYxB,MAAMC,KAAKmB,GAF1BK,EAGeF,EAAYT,OAAOO,EAAgBK,MAAO,GAArDX,EAHJC,OAAAC,EAAA,EAAAD,CAAAS,EAAA,MAKHD,EAAUV,OAAOQ,EAAqBI,MAAO,EAAGX,GAEhD,IAAMH,EAAS,GAIf,OAHAA,EAAOS,EAAgBM,aAAeJ,EACtCX,EAAOU,EAAqBK,aAAeH,EAEpCZ,GAKIgB,EAAe,SAACC,EAAYC,GAAb,OAAAd,OAAAe,EAAA,EAAAf,CAAA,CAE1BgB,WAAY,OACZC,QAASC,GACTC,OAAM,OAAA7B,OANK,EAML,QAGN8B,WAAYP,EAAa,aAAe,QAGrCC,IAGQO,EAAe,SAAAC,GAAc,MAAK,CAC7CC,gBAAiBD,EAAiB,YAAc,YAChDL,QAjBW,EAkBXO,MAAO,iCCjBMC,EAlCG,SAAAC,GAAmB,IAAhBC,EAAgBD,EAAhBC,UACnB,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWpB,YAAY,YAAYqB,KAAK,SACrC,SAACC,EAAUC,GAAX,OACCN,EAAAC,EAAAC,cAAA,OACEK,IAAKF,EAASG,SACdC,MAAOhB,EAAaa,EAASZ,gBAC7BgB,UAAU,yBAEVV,EAAAC,EAAAC,cAAA,MAAIQ,UAAU,qBAAd,cACCX,EAAUvC,IAAI,SAACmD,EAAM7B,GAAP,OACbkB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWS,IAAKD,EAAKlD,GAAIoD,YAAaF,EAAKlD,GAAIqB,MAAOA,GACnD,SAACuB,EAAUC,GAAX,OACCN,EAAAC,EAAAC,cAAA,MAAA9B,OAAA0C,OAAA,CACEP,IAAKF,EAASG,UACVH,EAASU,eACTV,EAASW,gBAHf,CAIEN,UAAU,wCACVD,MAAOzB,EACLsB,EAASrB,WACToB,EAASU,eAAeN,SAP5B,UAUIT,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,QAAQC,EAAKhD,cAKrC0C,EAASY,gBCMLC,EAlCD,SAAApB,GAAe,IAAZqB,EAAYrB,EAAZqB,MACf,OACEnB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWpB,YAAY,QAAQqB,KAAK,SACjC,SAACC,EAAUC,GAAX,OACCN,EAAAC,EAAAC,cAAA,OACEK,IAAKF,EAASG,SACdC,MAAOhB,EAAaa,EAASZ,gBAC7BgB,UAAU,yBAEVV,EAAAC,EAAAC,cAAA,MAAIQ,UAAU,qBAAd,YACCS,EAAM3D,IAAI,SAACmD,EAAM7B,GAAP,OACTkB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWS,IAAKD,EAAKlD,GAAIoD,YAAaF,EAAKlD,GAAIqB,MAAOA,GACnD,SAACuB,EAAUC,GAAX,OACCN,EAAAC,EAAAC,cAAA,MAAA9B,OAAA0C,OAAA,CACEP,IAAKF,EAASG,UACVH,EAASU,eACTV,EAASW,gBAHf,CAIEN,UAAU,mBACVD,MAAOzB,EACLsB,EAASrB,WACToB,EAASU,eAAeN,SAGzBE,EAAKhD,aAKb0C,EAASY,gBCxBdG,6MACJC,MAAQ,CACNF,MAAOrE,EAAS,IAChBiD,UAAWjD,EAAS,EAAG,IACvB6D,KAAM,CAAC,CAAElD,GAAI6D,MAAQlB,KAAM,SAAW,CAAE3C,GAAI6D,MAAQlB,KAAM,cAC1DmB,qBAAqB,KAQvBC,QAAU,CACRL,MAAO,QACPpB,UAAW,eAGb0B,QAAU,SAAAhE,GAAE,OAAIiE,EAAKL,MAAMK,EAAKF,QAAQ/D,OAExCkE,UAAY,SAAA3D,GAAU,IACZO,EAAwBP,EAAxBO,OAAQC,EAAgBR,EAAhBQ,YAGhB,GAAKA,EAAL,CAGA,GAAoB,cAAhBR,EAAOoC,MAA+C,cAAvB7B,EAAOQ,YAA6B,CACrE,IAAM4B,EAAO/C,EACX8D,EAAKL,MAAMV,KACX3C,EAAOO,OAAOO,MACdd,EAAOQ,YAAYM,OAQrB,OANA8C,QAAQC,IAAItD,EAAOO,MAAON,EAAYM,MAAO6B,QAE7Ce,EAAKI,SAAS,CACZnB,SAMJ,IACEpC,GACuB,cAAvBA,EAAOQ,cACPP,GAC4B,cAA5BA,EAAYO,YAId,GACER,GACAC,GACAD,EAAOQ,cAAgBP,EAAYO,YACnC,CACA,IAAMgD,EAAQnE,EACZ8D,EAAKD,QAAQlD,EAAOQ,aACpBR,EAAOO,MACPN,EAAYM,OAGVuC,EAAQ,CAAEU,SAEa,cAAvBxD,EAAOQ,cACTsC,EAAQ,CAAEtB,UAAWgC,IAGvBL,EAAKI,SAAST,OACT,CACL,IAAMrD,EAASM,EACboD,EAAKD,QAAQlD,EAAOQ,aACpB2C,EAAKD,QAAQjD,EAAYO,aACzBR,EACAC,GAGFkD,EAAKI,SAAS,CACZX,MAAOnD,EAAOmD,MACdpB,UAAW/B,EAAO+B,iBAKxBiC,YAAc,SAAAlC,GAAgB,IAAbvB,EAAauB,EAAbvB,OACXA,GAAUA,EAAOQ,eAOvBkD,aAAe,SAAAC,GAA6B,IAA1B3D,EAA0B2D,EAA1B3D,OAAQC,EAAkB0D,EAAlB1D,YACxB,OACyB,cAAvBD,EAAOQ,aACqB,cAA5BP,EAAYO,iBAKXR,GACCC,GACuB,cAAvBD,EAAOQ,aACqB,cAA5BP,EAAYO,aACU,cAAvBR,EAAOQ,aAA+C,OAAhBP,SALzC,4EAaO,IAAA2D,EAAAC,KACP,OACEpC,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,yBACbV,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,QAAf,iDACAV,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEwB,UAAWS,KAAKT,UAChBK,YAAaI,KAAKJ,YAClBC,aAAcG,KAAKH,cAEnBjC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEpB,YAAY,YACZsD,UAAU,aACVjC,KAAK,aAEJ,SAACC,EAAUC,GAAX,OACCN,EAAAC,EAAAC,cAAA,MAAA9B,OAAA0C,OAAA,CACEP,IAAKF,EAASG,UACVH,EAASiC,eAFf,CAGE5B,UAAU,gBAETyB,EAAKd,MAAMV,KAAKnD,IAAI,SAAC+E,EAAWzD,GAAZ,OACnBkB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACES,IAAK2B,EAAU9E,GACfoD,YAAa0B,EAAU9E,GACvBqB,MAAOA,GAEN,SAACuB,EAAUC,GAAX,OACCN,EAAAC,EAAAC,cAAA,MAAA9B,OAAA0C,OAAA,CACEP,IAAKF,EAASG,UACVH,EAASU,eACTV,EAASW,iBAEO,UAAnBuB,EAAUnC,KACTJ,EAAAC,EAAAC,cAACsC,EAAD,CACErB,MAAOgB,EAAKd,MAAMF,MAClBsB,eAAgBN,EAAKd,MAAME,sBAG7BvB,EAAAC,EAAAC,cAACwC,EAAD,CACE3C,UAAWoC,EAAKd,MAAMtB,UACtB0C,eAAgBN,EAAKd,MAAME,2BAOtClB,EAASY,wBA9JH0B,IAAMC,WAuKdxB","file":"static/js/172.23d9b268.chunk.js","sourcesContent":["// fake data generator\nexport const getItems = (count, offset = 0) =>\n  Array.from({ length: count }, (v, k) => k).map(k => ({\n    id: `item-${k + offset}`,\n    content: `item ${k + offset}`\n  }));\n\n// a little function to help us with reordering the result\nexport const reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\n/**\n * Moves an item from one list to another list.\n */\nexport const move = (\n  source,\n  destination,\n  droppableSource,\n  droppableDestination\n) => {\n  const sourceClone = Array.from(source);\n  const destClone = Array.from(destination);\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\n\n  destClone.splice(droppableDestination.index, 0, removed);\n\n  const result = {};\n  result[droppableSource.droppableId] = sourceClone;\n  result[droppableDestination.droppableId] = destClone;\n\n  return result;\n};\n\nconst grid = 8;\n\nexport const getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: 'none',\n  padding: grid * 2,\n  margin: `0 0 ${grid}px 0`,\n\n  // change background colour if dragging\n  background: isDragging ? 'lightgreen' : 'grey',\n\n  // styles we need to apply on draggables\n  ...draggableStyle\n});\n\nexport const getListStyle = isDraggingOver => ({\n  backgroundColor: isDraggingOver ? 'lightblue' : 'lightgrey',\n  padding: grid,\n  width: 250\n});\n","import React from 'react';\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\n\nimport { getListStyle, getItemStyle } from './util';\n\nconst Completed = ({ completed }) => {\n  return (\n    <Droppable droppableId=\"completed\" type=\"child\">\n      {(provided, snapshot) => (\n        <div\n          ref={provided.innerRef}\n          style={getListStyle(snapshot.isDraggingOver)}\n          className=\"TodoListDnD-Container\"\n        >\n          <h3 className=\"TodoListDnD-Title\">Completed:</h3>\n          {completed.map((item, index) => (\n            <Draggable key={item.id} draggableId={item.id} index={index}>\n              {(provided, snapshot) => (\n                <div\n                  ref={provided.innerRef}\n                  {...provided.draggableProps}\n                  {...provided.dragHandleProps}\n                  className=\"TodoListDnD-List TodoListDnD-Complete\"\n                  style={getItemStyle(\n                    snapshot.isDragging,\n                    provided.draggableProps.style\n                  )}\n                >\n                  âœ… <div className=\"text\">{item.content}</div>\n                </div>\n              )}\n            </Draggable>\n          ))}\n          {provided.placeholder}\n        </div>\n      )}\n    </Droppable>\n  );\n};\nexport default Completed;\n","import React from 'react';\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\n\nimport { getListStyle, getItemStyle } from './util';\n\nconst Todos = ({ todos }) => {\n  return (\n    <Droppable droppableId=\"todos\" type=\"child\">\n      {(provided, snapshot) => (\n        <div\n          ref={provided.innerRef}\n          style={getListStyle(snapshot.isDraggingOver)}\n          className=\"TodoListDnD-Container\"\n        >\n          <h3 className=\"TodoListDnD-Title\">Todo(s):</h3>\n          {todos.map((item, index) => (\n            <Draggable key={item.id} draggableId={item.id} index={index}>\n              {(provided, snapshot) => (\n                <div\n                  ref={provided.innerRef}\n                  {...provided.draggableProps}\n                  {...provided.dragHandleProps}\n                  className=\"TodoListDnD-List\"\n                  style={getItemStyle(\n                    snapshot.isDragging,\n                    provided.draggableProps.style\n                  )}\n                >\n                  {item.content}\n                </div>\n              )}\n            </Draggable>\n          ))}\n          {provided.placeholder}\n        </div>\n      )}\n    </Droppable>\n  );\n};\nexport default Todos;\n","import React from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { getItems, reorder, move, getItemStyle, getListStyle } from './util';\nimport './index.scss';\nimport uuid from 'uuid';\n\nimport Completed from './Completed';\nimport Todos from './Todos';\n\nclass TodoList extends React.Component {\n  state = {\n    todos: getItems(10),\n    completed: getItems(5, 10),\n    item: [{ id: uuid(), type: 'todos' }, { id: uuid(), type: 'completed' }],\n    isDraggingContainer: false\n  };\n\n  /**\n   * A semi-generic way to handle multiple lists. Matches\n   * the IDs of the droppable container to the names of the\n   * source arrays stored in the state.\n   */\n  id2List = {\n    todos: 'todos',\n    completed: 'completed'\n  };\n\n  getList = id => this.state[this.id2List[id]];\n\n  onDragEnd = result => {\n    const { source, destination } = result;\n\n    // dropped outside the list\n    if (!destination) {\n      return;\n    }\n    if (result.type === 'container' || source.droppableId === 'container') {\n      const item = reorder(\n        this.state.item,\n        result.source.index,\n        result.destination.index\n      );\n      console.log(source.index, destination.index, item);\n\n      this.setState({\n        item\n      });\n\n      return;\n    }\n\n    if (\n      source &&\n      source.droppableId !== 'container' &&\n      destination &&\n      destination.droppableId === 'container'\n    ) {\n      return;\n    }\n    if (\n      source &&\n      destination &&\n      source.droppableId === destination.droppableId\n    ) {\n      const items = reorder(\n        this.getList(source.droppableId),\n        source.index,\n        destination.index\n      );\n\n      let state = { items };\n\n      if (source.droppableId === 'completed') {\n        state = { completed: items };\n      }\n\n      this.setState(state);\n    } else {\n      const result = move(\n        this.getList(source.droppableId),\n        this.getList(destination.droppableId),\n        source,\n        destination\n      );\n\n      this.setState({\n        todos: result.todos,\n        completed: result.completed\n      });\n    }\n  };\n\n  onDragStart = ({ source }) => {\n    if (source && source.droppableId === 'container') {\n      // this.setState({ isDraggingContainer: true });\n    } else {\n      // this.setState({ isDraggingContainer: false });\n    }\n  };\n\n  onDragUpdate = ({ source, destination }) => {\n    if (\n      source.droppableId === 'container' &&\n      destination.droppableId !== 'container'\n    ) {\n      return false;\n    }\n    if (\n      (source &&\n        destination &&\n        source.droppableId !== 'container' &&\n        destination.droppableId === 'container') ||\n      (source.droppableId !== 'container' && destination === null)\n    ) {\n      return false;\n    }\n  };\n\n  // Normally you would want to split things out into separate components.\n  // But in this example everything is just done in one place for simplicity\n  render() {\n    return (\n      <div className=\"TodoListDnD-Container\">\n        <div className=\"desc\">Drag from ðŸ’ªTodo to âœ…Completed</div>\n        <DragDropContext\n          onDragEnd={this.onDragEnd}\n          onDragStart={this.onDragStart}\n          onDragUpdate={this.onDragUpdate}\n        >\n          <Droppable\n            droppableId=\"container\"\n            direction=\"horizontal\"\n            type=\"container\"\n          >\n            {(provided, snapshot) => (\n              <div\n                ref={provided.innerRef}\n                {...provided.droppableProps}\n                className=\"TodoListDnD\"\n              >\n                {this.state.item.map((container, index) => (\n                  <Draggable\n                    key={container.id}\n                    draggableId={container.id}\n                    index={index}\n                  >\n                    {(provided, snapshot) => (\n                      <div\n                        ref={provided.innerRef}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                      >\n                        {container.type === 'todos' ? (\n                          <Todos\n                            todos={this.state.todos}\n                            isDropDisabled={this.state.isDraggingContainer}\n                          />\n                        ) : (\n                          <Completed\n                            completed={this.state.completed}\n                            isDropDisabled={this.state.isDraggingContainer}\n                          />\n                        )}\n                      </div>\n                    )}\n                  </Draggable>\n                ))}\n                {provided.placeholder}\n              </div>\n            )}\n          </Droppable>\n        </DragDropContext>\n      </div>\n    );\n  }\n}\nexport default TodoList;\n"],"sourceRoot":""}