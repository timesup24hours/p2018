{"version":3,"sources":["components/FirstThreeJS/index.js"],"names":["FirstThreeJS","useRef","React","useEffect","useState","mount","_useState","_useState2","Object","_Users_kk_Desktop_p2018_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","isAnimating","setAnimating","controls","frameId","width","current","clientWidth","height","clientHeight","scene","THREE","camera","renderer","antialias","geometry","material","color","cube","position","z","add","setClearColor","setSize","renderScene","render","handleResize","aspect","updateProjectionMatrix","animate","rotation","x","y","window","requestAnimationFrame","start","stop","cancelAnimationFrame","appendChild","domElement","addEventListener","removeEventListener","removeChild","remove","dispose","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","className","ref","onClick"],"mappings":"uKA8FeA,UAzFM,WAAM,IACjBC,EAAgCC,IAAhCD,OAAQE,EAAwBD,IAAxBC,UAAWC,EAAaF,IAAbE,SACrBC,EAAQJ,EAAO,MAFIK,EAGWF,GAAS,GAHpBG,EAAAC,OAAAC,EAAA,EAAAD,CAAAF,EAAA,GAGlBI,EAHkBH,EAAA,GAGLI,EAHKJ,EAAA,GAInBK,EAAWX,EAAO,MA4ExB,OA1EAE,EAAU,WACR,IAEIU,EAFAC,EAAQT,EAAMU,QAAQC,YACtBC,EAASZ,EAAMU,QAAQG,aAGrBC,EAAQ,IAAIC,IACZC,EAAS,IAAID,IAAwB,GAAIN,EAAQG,EAAQ,GAAK,KAC9DK,EAAW,IAAIF,IAAoB,CAAEG,WAAW,IAChDC,EAAW,IAAIJ,IAAkB,EAAG,EAAG,GACvCK,EAAW,IAAIL,IAAwB,CAAEM,MAAO,WAChDC,EAAO,IAAIP,IAAWI,EAAUC,GAEtCJ,EAAOO,SAASC,EAAI,EACpBV,EAAMW,IAAIH,GACVL,EAASS,cAAc,WACvBT,EAASU,QAAQlB,EAAOG,GAExB,IAAMgB,EAAc,WAClBX,EAASY,OAAOf,EAAOE,IAGnBc,EAAe,WACnBrB,EAAQT,EAAMU,QAAQC,YACtBC,EAASZ,EAAMU,QAAQG,aACvBI,EAASU,QAAQlB,EAAOG,GACxBI,EAAOe,OAAStB,EAAQG,EACxBI,EAAOgB,yBACPJ,KAGIK,EAAU,SAAVA,IACJX,EAAKY,SAASC,GAAK,IACnBb,EAAKY,SAASE,GAAK,IAEnBR,IACApB,EAAU6B,OAAOC,sBAAsBL,IAGnCM,EAAQ,WACP/B,IACHA,EAAU8B,sBAAsBL,KAI9BO,EAAO,WACXC,qBAAqBjC,GACrBA,EAAU,MASZ,OANAR,EAAMU,QAAQgC,YAAYzB,EAAS0B,YACnCN,OAAOO,iBAAiB,SAAUd,GAClCS,IAEAhC,EAASG,QAAU,CAAE6B,QAAOC,QAErB,WACLA,IACAH,OAAOQ,oBAAoB,SAAUf,GACrC9B,EAAMU,QAAQoC,YAAY7B,EAAS0B,YAEnC7B,EAAMiC,OAAOzB,GACbH,EAAS6B,UACT5B,EAAS4B,YAEV,IAEHlD,EAAU,WACJO,EACFE,EAASG,QAAQ6B,QAEjBhC,EAASG,QAAQ8B,QAElB,CAACnC,IAGF4C,EAAAC,EAAAC,cAAA,OACEC,UAAU,eACVC,IAAKrD,EACLsD,QAAS,kBAAMhD,GAAcD","file":"static/js/181.12813418.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport './index.scss';\n\nimport * as THREE from 'three';\n\nconst FirstThreeJS = () => {\n  const { useRef, useEffect, useState } = React;\n  const mount = useRef(null);\n  const [isAnimating, setAnimating] = useState(true);\n  const controls = useRef(null);\n\n  useEffect(() => {\n    let width = mount.current.clientWidth;\n    let height = mount.current.clientHeight;\n    let frameId;\n\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\n    const geometry = new THREE.BoxGeometry(1, 1, 1);\n    const material = new THREE.MeshBasicMaterial({ color: 0xff00ff });\n    const cube = new THREE.Mesh(geometry, material);\n\n    camera.position.z = 4;\n    scene.add(cube);\n    renderer.setClearColor('#000000');\n    renderer.setSize(width, height);\n\n    const renderScene = () => {\n      renderer.render(scene, camera);\n    };\n\n    const handleResize = () => {\n      width = mount.current.clientWidth;\n      height = mount.current.clientHeight;\n      renderer.setSize(width, height);\n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n      renderScene();\n    };\n\n    const animate = () => {\n      cube.rotation.x += 0.01;\n      cube.rotation.y += 0.01;\n\n      renderScene();\n      frameId = window.requestAnimationFrame(animate);\n    };\n\n    const start = () => {\n      if (!frameId) {\n        frameId = requestAnimationFrame(animate);\n      }\n    };\n\n    const stop = () => {\n      cancelAnimationFrame(frameId);\n      frameId = null;\n    };\n\n    mount.current.appendChild(renderer.domElement);\n    window.addEventListener('resize', handleResize);\n    start();\n\n    controls.current = { start, stop };\n\n    return () => {\n      stop();\n      window.removeEventListener('resize', handleResize);\n      mount.current.removeChild(renderer.domElement);\n\n      scene.remove(cube);\n      geometry.dispose();\n      material.dispose();\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isAnimating) {\n      controls.current.start();\n    } else {\n      controls.current.stop();\n    }\n  }, [isAnimating]);\n\n  return (\n    <div\n      className=\"FirstThreeJS\"\n      ref={mount}\n      onClick={() => setAnimating(!isAnimating)}\n    />\n  );\n};\n\nexport default FirstThreeJS;\n"],"sourceRoot":""}