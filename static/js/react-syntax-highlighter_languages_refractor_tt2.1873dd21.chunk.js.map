{"version":3,"sources":["../node_modules/refractor/lang/tt2.js","../node_modules/refractor/lang/markup-templating.js"],"names":["refractorMarkupTemplating","__webpack_require__","tt2","Prism","register","languages","extend","comment","pattern","lookbehind","keyword","punctuation","insertBefore","operator","variable","delimiter","alias","single-quoted-string","greedy","double-quoted-string","inside","string","hooks","add","env","buildPlaceholders","tokenizePlaceholders","module","exports","displayName","aliases","markupTemplating","getPlaceholder","language","index","toUpperCase","Object","defineProperties","value","placeholderPattern","replaceFilter","tokenStack","code","replace","match","placeholder","i","length","indexOf","grammar","markup","j","keys","walkTokens","tokens","token","content","k","t","s","before","substring","middle","Token","tokenize","after","replacement","push","apply","splice","concat"],"mappings":"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","file":"static/js/react-syntax-highlighter_languages_refractor_tt2.1873dd21.chunk.js","sourcesContent":["'use strict';\n\nvar refractorMarkupTemplating = require('./markup-templating.js');\n\nmodule.exports = tt2;\ntt2.displayName = 'tt2';\ntt2.aliases = [];\n\nfunction tt2(Prism) {\n  Prism.register(refractorMarkupTemplating);\n\n  (function (Prism) {\n    Prism.languages.tt2 = Prism.languages.extend('clike', {\n      comment: {\n        pattern: /#.*|\\[%#[\\s\\S]*?%\\]/,\n        lookbehind: true\n      },\n      keyword: /\\b(?:BLOCK|CALL|CASE|CATCH|CLEAR|DEBUG|DEFAULT|ELSE|ELSIF|END|FILTER|FINAL|FOREACH|GET|IF|IN|INCLUDE|INSERT|LAST|MACRO|META|NEXT|PERL|PROCESS|RAWPERL|RETURN|SET|STOP|TAGS|THROW|TRY|SWITCH|UNLESS|USE|WHILE|WRAPPER)\\b/,\n      punctuation: /[[\\]{},()]/\n    });\n    Prism.languages.insertBefore('tt2', 'number', {\n      operator: /=[>=]?|!=?|<=?|>=?|&&|\\|\\|?|\\b(?:and|or|not)\\b/,\n      variable: {\n        pattern: /[a-z]\\w*(?:\\s*\\.\\s*(?:\\d+|\\$?[a-z]\\w*))*/i\n      }\n    });\n    Prism.languages.insertBefore('tt2', 'keyword', {\n      delimiter: {\n        pattern: /^(?:\\[%|%%)-?|-?%]$/,\n        alias: 'punctuation'\n      }\n    });\n    Prism.languages.insertBefore('tt2', 'string', {\n      'single-quoted-string': {\n        pattern: /'[^\\\\']*(?:\\\\[\\s\\S][^\\\\']*)*'/,\n        greedy: true,\n        alias: 'string'\n      },\n      'double-quoted-string': {\n        pattern: /\"[^\\\\\"]*(?:\\\\[\\s\\S][^\\\\\"]*)*\"/,\n        greedy: true,\n        alias: 'string',\n        inside: {\n          variable: {\n            pattern: /\\$(?:[a-z]\\w*(?:\\.(?:\\d+|\\$?[a-z]\\w*))*)/i\n          }\n        }\n      }\n    }); // The different types of TT2 strings \"replace\" the C-like standard string\n\n    delete Prism.languages.tt2.string;\n    Prism.hooks.add('before-tokenize', function (env) {\n      var tt2Pattern = /\\[%[\\s\\S]+?%\\]/g;\n      Prism.languages['markup-templating'].buildPlaceholders(env, 'tt2', tt2Pattern);\n    });\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'tt2');\n    });\n  })(Prism);\n}","'use strict';\n\nmodule.exports = markupTemplating;\nmarkupTemplating.displayName = 'markupTemplating';\nmarkupTemplating.aliases = [];\n\nfunction markupTemplating(Prism) {\n  ;\n\n  (function (Prism) {\n    /**\n     * Returns the placeholder for the given language id and index.\n     *\n     * @param {string} language\n     * @param {string|number} index\n     * @returns {string}\n     */\n    function getPlaceholder(language, index) {\n      return '___' + language.toUpperCase() + index + '___';\n    }\n\n    Object.defineProperties(Prism.languages['markup-templating'] = {}, {\n      buildPlaceholders: {\n        /**\n         * Tokenize all inline templating expressions matching `placeholderPattern`.\n         *\n         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n         * `true` will be replaced.\n         *\n         * @param {object} env The environment of the `before-tokenize` hook.\n         * @param {string} language The language id.\n         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n         * @param {(match: string) => boolean} [replaceFilter]\n         */\n        value: function value(env, language, placeholderPattern, replaceFilter) {\n          if (env.language !== language) {\n            return;\n          }\n\n          var tokenStack = env.tokenStack = [];\n          env.code = env.code.replace(placeholderPattern, function (match) {\n            if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n              return match;\n            }\n\n            var i = tokenStack.length;\n            var placeholder; // Check for existing strings\n\n            while (env.code.indexOf(placeholder = getPlaceholder(language, i)) !== -1) {\n              ++i;\n            } // Create a sparse array\n\n\n            tokenStack[i] = match;\n            return placeholder;\n          }); // Switch the grammar to markup\n\n          env.grammar = Prism.languages.markup;\n        }\n      },\n      tokenizePlaceholders: {\n        /**\n         * Replace placeholders with proper tokens after tokenizing.\n         *\n         * @param {object} env The environment of the `after-tokenize` hook.\n         * @param {string} language The language id.\n         */\n        value: function value(env, language) {\n          if (env.language !== language || !env.tokenStack) {\n            return;\n          } // Switch the grammar back\n\n\n          env.grammar = Prism.languages[language];\n          var j = 0;\n          var keys = Object.keys(env.tokenStack);\n\n          function walkTokens(tokens) {\n            for (var i = 0; i < tokens.length; i++) {\n              // all placeholders are replaced already\n              if (j >= keys.length) {\n                break;\n              }\n\n              var token = tokens[i];\n\n              if (typeof token === 'string' || token.content && typeof token.content === 'string') {\n                var k = keys[j];\n                var t = env.tokenStack[k];\n                var s = typeof token === 'string' ? token : token.content;\n                var placeholder = getPlaceholder(language, k);\n                var index = s.indexOf(placeholder);\n\n                if (index > -1) {\n                  ++j;\n                  var before = s.substring(0, index);\n                  var middle = new Prism.Token(language, Prism.tokenize(t, env.grammar), 'language-' + language, t);\n                  var after = s.substring(index + placeholder.length);\n                  var replacement = [];\n\n                  if (before) {\n                    replacement.push.apply(replacement, walkTokens([before]));\n                  }\n\n                  replacement.push(middle);\n\n                  if (after) {\n                    replacement.push.apply(replacement, walkTokens([after]));\n                  }\n\n                  if (typeof token === 'string') {\n                    tokens.splice.apply(tokens, [i, 1].concat(replacement));\n                  } else {\n                    token.content = replacement;\n                  }\n                }\n              } else if (token.content\n              /* && typeof token.content !== 'string' */\n              ) {\n                  walkTokens(token.content);\n                }\n            }\n\n            return tokens;\n          }\n\n          walkTokens(env.tokens);\n        }\n      }\n    });\n  })(Prism);\n}"],"sourceRoot":""}